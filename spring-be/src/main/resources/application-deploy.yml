server:
  port: 9090

spring:
  datasource:
    url: ${SPRING_DATASOURCE_URL}
    username: ${SPRING_DATASOURCE_USERNAME}
    password: ${SPRING_DATASOURCE_PASSWORD}
    driver-class-name: ${SPRING_DATASOURCE_DRIVER}

  jpa:
    hibernate:
      ddl-auto: update #create update none
    properties:
      hibernate:
        default_batch_fetch_size: 100
        #show-sql: true
        format_sql: true
        dialect: org.hibernate.dialect.MySQLDialect
  rabbitmq:
    host: ${RABBITMQ_HOST} # RabbitMQ host ip
    port: ${RABBITMQ_PORT} # RabbitMQ port
    username: ${RABBITMQ_USERNAME} # RabbitMQ 웹 관리 콘솔 아이디
    password: ${RABBITMQ_PASSWORD} # RabbitMQ 웹 관리 콘솔 비밀번호
  data:
    redis:
      host: ${REDIS_CLUSTER_IP}
      port: ${REDIS_CLUSTER_PORT}
      cluster:
        nodes: ${REDIS_CLUSTER_NODES}
      lettuce:
        pool:
          max-active: 8 # 풀에 할당할 수 있는 최대 연결 수
          max-idle: 8 # 풀에서 유지할 수 있는 최대 유휴 연결 수
          min-idle: 0 # 풀에서 유지할 수 있는 최소 유휴 연결 수 (0으로 유휴 연결을 완전히 제거하지 않음)




rabbitmq:
  queue:
    name: ${RABBITMQ_QUEUE_NAME} # 사용할 queue 이름
  exchange:
    name: ${RABBITMQ_EXCHANGE_NAME} # 사용할 exchange 이름
  routing:
    key: ${RABBITMQ_ROUTING_KEY} # 사용할 routing key

logging:
  level:
    org:
      hibernate.SQL: debug
      springframework.data.redis: DEBUG

security:
  jwt:
    token:
      secret-key: "remoaremoaremoaremoaremoaremoaremoaremoaremoaremoaremoaremoaremoaremoaremoaremoaremoaremoa"
      expiration-minutes: 30    # 3시간 -> 30분
      refresh-expiration-hours: 4    # 리프레시 토큰 유효시간은 24시간

flask:
  base-url: http://flask:5000/ml/api/  # 로컬 프로파일용 Flask URL

cloud:
  aws:
    credentials:
      access-key: ${AWS_ACCESS_KEY}
      secret-key: ${AWS_SECRET_KEY}
    region:
      static: ap-northeast-2
    s3:
      bucket: remoa
    stack:
      auto: false



